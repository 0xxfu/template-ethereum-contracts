/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Base__factory>;
    getContractFactory(
      name: "IApprovalReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IApprovalReceiver__factory>;
    getContractFactory(
      name: "IPaidForReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaidForReceiver__factory>;
    getContractFactory(
      name: "ITransferReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferReceiver__factory>;
    getContractFactory(
      name: "ERC20Internal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Internal__factory>;
    getContractFactory(
      name: "SimpleERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleERC20__factory>;
    getContractFactory(
      name: "WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithPermit__factory>;
    getContractFactory(
      name: "WithPermitAndFixedDomain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithPermitAndFixedDomain__factory>;
    getContractFactory(
      name: "GreetingsRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GreetingsRegistry__factory>;
    getContractFactory(
      name: "IERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612__factory>;
    getContractFactory(
      name: "IERC2612Standalone",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612Standalone__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Base>;
    getContractAt(
      name: "IApprovalReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IApprovalReceiver>;
    getContractAt(
      name: "IPaidForReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaidForReceiver>;
    getContractAt(
      name: "ITransferReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferReceiver>;
    getContractAt(
      name: "ERC20Internal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Internal>;
    getContractAt(
      name: "SimpleERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleERC20>;
    getContractAt(
      name: "WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithPermit>;
    getContractAt(
      name: "WithPermitAndFixedDomain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithPermitAndFixedDomain>;
    getContractAt(
      name: "GreetingsRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GreetingsRegistry>;
    getContractAt(
      name: "IERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612>;
    getContractAt(
      name: "IERC2612Standalone",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612Standalone>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
